import re
import random
import datetime
import webbrowser
import requests
import spacy
from googletrans import Translator
from textblob import TextBlob


nlp = spacy.load("ru_core_news_sm")
translator = Translator()

API_KEY = "16096f9c40048c4f62d4bdba2b5f73ce"

DAYS_RU = {
    "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
    "Wednesday": "—Å—Ä–µ–¥–∞",
    "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
    "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
    "Saturday": "—Å—É–±–±–æ—Ç–∞",
    "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
}


def log_dialog(user_input, bot_response):
    with open("chat_log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_input}\n")
        log_file.write(f"–ë–æ—Ç: {bot_response}\n")
        log_file.write("-" * 40 + "\n")


def search_web(query):
    url = f"https://www.google.com/search?q={query}"
    webbrowser.open(url)
    return f"–û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞: {query}"


def get_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        temp = data["main"]["temp"]
        weather_desc = data["weather"][0]["description"]
        return f"–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {weather_desc} –∏ {temp}¬∞C."
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."

def analyze_sentiment(text):
    try:
        translated = translator.translate(text, dest="en").text
        polarity = TextBlob(translated).sentiment.polarity
    except Exception:
        return "–•–º... —Å–ª–æ–∂–Ω–æ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –ù–æ —è –∑–¥–µ—Å—å, –µ—Å–ª–∏ —á—Ç–æ üòä"

    if polarity > 0.3:
        return "–¢—ã –∑–≤—É—á–∏—à—å –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ! üòÑ –ß–µ–º –º–æ–≥—É –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –µ—â—ë?"
    elif polarity < -0.3:
        return "–¢—ã, –ø–æ—Ö–æ–∂–µ, –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... üòî –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?"
    else:
        return "–£–ª–∞–≤–ª–∏–≤–∞—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π. –°–ø—Ä–∞—à–∏–≤–∞–π, –µ—Å–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–æ!"

def process_text(text):
    doc = nlp(text)
    return [token.lemma_ for token in doc if not token.is_punct]


responses = {
    r"\b–ø—Ä–∏–≤–µ—Ç\b": [
        "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üòä –ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
        "–ô–æ! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!",
    ],
    r"\b–∫–∞–∫\b.*\b–∑–≤–∞—Ç—å\b": [
        "–Ø –û–ª–µ–≥, —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ê —Ç–µ–±—è –∫–∞–∫ –∑–æ–≤—É—Ç?",
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –û–ª–µ–≥. –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ–±—Ä–∞—â–∞–π—Å—è!",
    ],
    r"\b–Ω–∞—Å—Ç–æ—è—â–∏–π\b|\b–∂–∏–≤–æ–π\b|\b—á–µ–ª–æ–≤–µ–∫\b": [
        "–Ø –ø–æ–∫–∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫... –Ω–æ —É–∂–µ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º! üòè",
        "–ü–æ—á—Ç–∏! –¢–æ–ª—å–∫–æ –Ω–µ –ø—å—é —á–∞–π –∏ –Ω–µ —Ö–æ–∂—É –≤ –º–∞–≥–∞–∑–∏–Ω üòÑ",
    ],
    r"\b–¥–µ–ª–æ\b|\b–Ω–æ–≤—ã–π\b": [
        "–í—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª! üòä –ê —É —Ç–µ–±—è –∫–∞–∫?",
        "–ñ–∏–∑–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å –º–Ω–µ! –ö–∞–∫ —Å–∞–º?",
    ],
    r"\b—É–º–µ—Ç—å\b": [
        "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É, –≤—Ä–µ–º—è, —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–∏—Å–∫ –∏ –¥–∞–∂–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å ‚Äî –ø–æ–≥–æ–¥–∞, –≤—Ä–µ–º—è, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –ø–æ–∏—Å–∫... –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å üòä",
    ],
    r"\b—Å–ø–∞—Å–∏–±–æ\b|\b–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å\b": [
        "–†–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è üòä",
        "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! –ß–µ–º –µ—â—ë –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?",
    ],
    r"\b–ø–æ–∫–∞\b|\b—Å–≤–∏–¥–∞–Ω–∏–µ\b": [
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–∞–¥–µ—é—Å—å, —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –ø–æ–±–æ–ª—Ç–∞–µ–º üëã",
        "–ü–æ–∫–∞! –ë–µ—Ä–µ–≥–∏ —Å–µ–±—è!",
    ],
    r"\b–≤—Ä–µ–º—è\b|\b—á–∞—Å\b": lambda _: datetime.datetime.now().strftime("–°–µ–π—á–∞—Å %H:%M."),
    r"\b—á–∏—Å–ª–æ\b|\b–¥–∞—Ç–∞\b": lambda _: datetime.datetime.now().strftime("–°–µ–≥–æ–¥–Ω—è %d.%m.%Y."),
    r"\b–¥–µ–Ω—å\b.*\b–Ω–µ–¥–µ–ª—è\b": lambda _: f"–°–µ–≥–æ–¥–Ω—è {DAYS_RU[datetime.datetime.now().strftime('%A')]}.",
    r"\b–ø–æ–≥–æ–¥–∞\b.*\b–≤\b\s+(\w+)": lambda m: get_weather(m.group(1)),
    r"\b–ø–æ–∏—Å–∫\b\s+(.+)": lambda m: search_web(m.group(1)),
}

def chatbot_response(text):
    original_text = text
    text = text.lower()
    lemmas = process_text(text)
    lemmatized_text = " ".join(lemmas)

    for pattern, response in responses.items():
        match = re.search(pattern, lemmatized_text)
        if match:
            if callable(response):
                reply = response(match)
            elif isinstance(response, list):
                reply = random.choice(response)
            else:
                reply = response
            log_dialog(original_text, reply)
            return reply

    reply = analyze_sentiment(original_text)
    log_dialog(original_text, reply)
    return reply

if __name__ == "__main__":
    print("–í–≤–µ–¥–∏—Ç–µ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞.")
    while True:
        user_input = input("–í—ã: ")
        if user_input.lower() in ("–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞"):
            farewell = random.choice(["–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!", "–ü–æ–∫–∞-–ø–æ–∫–∞!", "–î–æ —Å–∫–æ—Ä–æ–≥–æ –æ–±—â–µ–Ω–∏—è!"])
            print("–ë–æ—Ç:", farewell)
            log_dialog(user_input, farewell)
            break
        bot_reply = chatbot_response(user_input)
        print("–ë–æ—Ç:", bot_reply)
